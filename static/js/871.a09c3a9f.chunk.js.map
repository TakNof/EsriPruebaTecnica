{"version":3,"file":"static/js/871.a09c3a9f.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/action-group/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/action-group/action-group.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/action-group/action-group.scss?tag=calcite-action-group&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/array.ts","../node_modules/@esri/calcite-components/dist/components/src/components/action-menu/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/action-menu/action-menu.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/action-menu/action-menu.scss?tag=calcite-action-menu&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/conditionalSlot.ts"],"sourcesContent":["export const SLOTS = {\n  menuActions: \"menu-actions\",\n  menuTooltip: \"menu-tooltip\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n};\n\nexport const CSS = {\n  container: \"container\",\n};\n","import { Component, Element, h, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { CalciteActionMenuCustomEvent } from \"../../components\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { SLOTS as ACTION_MENU_SLOTS } from \"../action-menu/resources\";\nimport { Columns, Layout, Scale } from \"../interfaces\";\nimport { ActionGroupMessages } from \"./assets/action-group/t9n\";\nimport { ICONS, SLOTS, CSS } from \"./resources\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport { slotChangeHasAssignedElement } from \"../../utils/dom\";\n\n/**\n * @slot - A slot for adding a group of `calcite-action`s.\n * @slot menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`.\n * @slot menu-tooltip - A slot for adding a `calcite-tooltip` for the menu.\n */\n@Component({\n  tag: \"calcite-action-group\",\n  styleUrl: \"action-group.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ActionGroup\n  implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    this.menuOpen = false;\n  }\n\n  /**\n   *  Accessible name for the component.\n   */\n  @Prop() label: string;\n\n  /**\n   * Indicates the layout of the component.\n   *\n   * @deprecated Use the `layout` property on the component's parent instead.\n   */\n  @Prop({ reflect: true }) layout: Layout = \"vertical\";\n\n  /**\n   * Indicates number of columns.\n   */\n  @Prop({ reflect: true }) columns: Columns;\n\n  /**\n   * When `true`, the `calcite-action-menu` is open.\n   */\n  @Prop({ reflect: true, mutable: true }) menuOpen = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Specifies the size of the `calcite-action-menu`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionGroupMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionGroupMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n  @Element() el: HTMLCalciteActionGroupElement;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionGroupMessages;\n\n  @State() hasMenuActions = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    connectConditionalSlotComponent(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderMenu(): VNode {\n    const { expanded, menuOpen, scale, layout, messages, overlayPositioning, hasMenuActions } =\n      this;\n\n    return (\n      <calcite-action-menu\n        expanded={expanded}\n        flipPlacements={[\"left\", \"right\"]}\n        hidden={!hasMenuActions}\n        label={messages.more}\n        onCalciteActionMenuOpen={this.setMenuOpen}\n        open={menuOpen}\n        overlayPositioning={overlayPositioning}\n        placement={layout === \"horizontal\" ? \"bottom-start\" : \"leading-start\"}\n        scale={scale}\n      >\n        <calcite-action\n          icon={ICONS.menu}\n          scale={scale}\n          slot={ACTION_MENU_SLOTS.trigger}\n          text={messages.more}\n          textEnabled={expanded}\n        />\n        <slot name={SLOTS.menuActions} onSlotchange={this.handleMenuActionsSlotChange} />\n        <slot name={SLOTS.menuTooltip} slot={ACTION_MENU_SLOTS.tooltip} />\n      </calcite-action-menu>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <div aria-label={this.label} class={CSS.container} role=\"group\">\n        <slot />\n        {this.renderMenu()}\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  setMenuOpen = (event: CalciteActionMenuCustomEvent<void>): void => {\n    this.menuOpen = !!(event.target as HTMLCalciteActionMenuElement).open;\n  };\n\n  handleMenuActionsSlotChange = (event: Event): void => {\n    this.hasMenuActions = slotChangeHasAssignedElement(event);\n  };\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-group-columns: Sets number of grid-template-columns when the `layout` property is `\"grid\"`.\n * @prop --calcite-action-group-gap: Sets the gap (gutters) between rows and columns when the `layout` property is `\"grid\"`.\n * @prop --calcite-action-group-padding: Sets the padding when the `layout` property is `\"grid\"`.\n */\n\n:host {\n  @extend %component-host;\n\n  @apply flex\n  flex-col\n  p-0;\n\n  --calcite-action-group-columns: 3;\n  --calcite-action-group-gap: theme(\"gap.px\");\n  --calcite-action-group-padding: theme(\"padding.px\");\n}\n\n.container {\n  @apply flex flex-col flex-grow;\n}\n\n:host([columns=\"1\"]) {\n  --calcite-action-group-columns: 1;\n}\n:host([columns=\"2\"]) {\n  --calcite-action-group-columns: 2;\n}\n:host([columns=\"3\"]) {\n  --calcite-action-group-columns: 3;\n}\n:host([columns=\"4\"]) {\n  --calcite-action-group-columns: 4;\n}\n:host([columns=\"5\"]) {\n  --calcite-action-group-columns: 5;\n}\n:host([columns=\"6\"]) {\n  --calcite-action-group-columns: 6;\n}\n\n:host(:first-child) {\n  @apply pt-0;\n}\n\n:host([layout=\"horizontal\"]),\n:host([layout=\"horizontal\"]) .container {\n  @apply flex-row;\n}\n\n:host([layout=\"grid\"]) {\n  @apply grid;\n}\n\n:host([layout=\"grid\"]) .container {\n  @apply bg-background\n  grid\n  place-content-stretch;\n  gap: var(--calcite-action-group-gap);\n  padding: var(--calcite-action-group-gap);\n  grid-template-columns: repeat(var(--calcite-action-group-columns), auto);\n}\n\n@include base-component();\n","export function getRoundRobinIndex(index: number, total: number): number {\n  return (index + total) % total;\n}\n","export const CSS = {\n  menu: \"menu\",\n  defaultTrigger: \"default-trigger\",\n};\n\nexport const SLOTS = {\n  tooltip: \"tooltip\",\n  trigger: \"trigger\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n};\n\nexport const activeAttr = \"data-active\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from \"@stencil/core\";\nimport { Fragment, VNode } from \"@stencil/core/internal\";\nimport { getRoundRobinIndex } from \"../../utils/array\";\nimport { focusElement, toAriaBoolean } from \"../../utils/dom\";\nimport { EffectivePlacement, LogicalPlacement, OverlayPositioning } from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { isActivationKey } from \"../../utils/key\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Appearance, Scale } from \"../interfaces\";\nimport { activeAttr, CSS, ICONS, SLOTS } from \"./resources\";\n\nconst SUPPORTED_MENU_NAV_KEYS = [\"ArrowUp\", \"ArrowDown\", \"End\", \"Home\"];\n\n/**\n * @slot - A slot for adding `calcite-action`s.\n * @slot trigger - A slot for adding a `calcite-action` to trigger opening the menu.\n * @slot tooltip - A slot for adding an tooltip for the menu.\n */\n@Component({\n  tag: \"calcite-action-menu\",\n  styleUrl: \"action-menu.scss\",\n  shadow: true,\n})\nexport class ActionMenu implements LoadableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.connectMenuButtonEl();\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.disconnectMenuButtonEl();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Specifies the appearance of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"solid\" | \"transparent\", Appearance> = \"solid\";\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    this.open = false;\n    this.setTooltipReferenceElement();\n  }\n\n  /**\n   * Defines the available placements that can be used when a flip occurs.\n   */\n  @Prop() flipPlacements: EffectivePlacement[];\n\n  /**\n   *  Specifies the text string for the component.\n   */\n  @Prop() label!: string;\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(open: boolean): void {\n    this.activeMenuItemIndex = this.open ? 0 : -1;\n    if (this.menuButtonEl) {\n      this.menuButtonEl.active = open;\n    }\n    this.calciteActionMenuOpen.emit();\n\n    this.setTooltipReferenceElement();\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  /**\n   * Specifies the size of the component's trigger `calcite-action`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the `open` property is toggled.\n   *\n   */\n  @Event({ cancelable: false }) calciteActionMenuOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionMenuElement;\n\n  @State() menuButtonEl: HTMLCalciteActionElement;\n\n  slottedMenuButtonEl: HTMLCalciteActionElement;\n\n  defaultMenuButtonEl: HTMLCalciteActionElement;\n\n  actionElements: HTMLCalciteActionElement[] = [];\n\n  guid = `calcite-action-menu-${guid()}`;\n\n  menuId = `${this.guid}-menu`;\n\n  menuButtonId = `${this.guid}-menu-button`;\n\n  tooltipEl: HTMLCalciteTooltipElement;\n\n  @State() activeMenuItemIndex = -1;\n\n  @Watch(\"activeMenuItemIndex\")\n  activeMenuItemIndexHandler(): void {\n    this.updateActions(this.actionElements);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return focusElement(this.menuButtonEl);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  connectMenuButtonEl = (): void => {\n    const { menuButtonId, menuId, open, label } = this;\n    const menuButtonEl = this.slottedMenuButtonEl || this.defaultMenuButtonEl;\n\n    if (this.menuButtonEl === menuButtonEl) {\n      return;\n    }\n\n    this.disconnectMenuButtonEl();\n\n    this.menuButtonEl = menuButtonEl;\n\n    this.setTooltipReferenceElement();\n\n    if (!menuButtonEl) {\n      return;\n    }\n\n    menuButtonEl.active = open;\n    menuButtonEl.setAttribute(\"aria-controls\", menuId);\n    menuButtonEl.setAttribute(\"aria-expanded\", toAriaBoolean(open));\n    menuButtonEl.setAttribute(\"aria-haspopup\", \"true\");\n\n    if (!menuButtonEl.id) {\n      menuButtonEl.id = menuButtonId;\n    }\n\n    if (!menuButtonEl.label) {\n      menuButtonEl.label = label;\n    }\n\n    if (!menuButtonEl.text) {\n      menuButtonEl.text = label;\n    }\n\n    menuButtonEl.addEventListener(\"click\", this.menuButtonClick);\n    menuButtonEl.addEventListener(\"keydown\", this.menuButtonKeyDown);\n  };\n\n  disconnectMenuButtonEl = (): void => {\n    const { menuButtonEl } = this;\n\n    if (!menuButtonEl) {\n      return;\n    }\n\n    menuButtonEl.removeEventListener(\"click\", this.menuButtonClick);\n    menuButtonEl.removeEventListener(\"keydown\", this.menuButtonKeyDown);\n  };\n\n  setMenuButtonEl = (event: Event): void => {\n    const actions = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el) => el?.matches(\"calcite-action\")) as HTMLCalciteActionElement[];\n\n    this.slottedMenuButtonEl = actions[0];\n    this.connectMenuButtonEl();\n  };\n\n  setDefaultMenuButtonEl = (el: HTMLCalciteActionElement): void => {\n    this.defaultMenuButtonEl = el;\n    this.connectMenuButtonEl();\n  };\n\n  renderMenuButton(): VNode {\n    const { appearance, label, scale, expanded } = this;\n\n    const menuButtonSlot = (\n      <slot name={SLOTS.trigger} onSlotchange={this.setMenuButtonEl}>\n        <calcite-action\n          appearance={appearance}\n          class={CSS.defaultTrigger}\n          icon={ICONS.menu}\n          scale={scale}\n          text={label}\n          textEnabled={expanded}\n          // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n          ref={this.setDefaultMenuButtonEl}\n        />\n      </slot>\n    );\n\n    return menuButtonSlot;\n  }\n\n  renderMenuItems(): VNode {\n    const {\n      actionElements,\n      activeMenuItemIndex,\n      open,\n      menuId,\n      menuButtonEl,\n      label,\n      placement,\n      overlayPositioning,\n      flipPlacements,\n    } = this;\n\n    const activeAction = actionElements[activeMenuItemIndex];\n    const activeDescendantId = activeAction?.id || null;\n\n    return (\n      <calcite-popover\n        autoClose={true}\n        flipPlacements={flipPlacements}\n        focusTrapDisabled={true}\n        label={label}\n        offsetDistance={0}\n        onCalcitePopoverClose={this.handlePopoverClose}\n        onCalcitePopoverOpen={this.handlePopoverOpen}\n        open={open}\n        overlayPositioning={overlayPositioning}\n        placement={placement}\n        pointerDisabled={true}\n        referenceElement={menuButtonEl}\n      >\n        <div\n          aria-activedescendant={activeDescendantId}\n          aria-labelledby={menuButtonEl?.id}\n          class={CSS.menu}\n          id={menuId}\n          onClick={this.handleCalciteActionClick}\n          role=\"menu\"\n          tabIndex={-1}\n        >\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n        </div>\n      </calcite-popover>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <Fragment>\n        {this.renderMenuButton()}\n        {this.renderMenuItems()}\n        <slot name={SLOTS.tooltip} onSlotchange={this.updateTooltip} />\n      </Fragment>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleCalciteActionClick = (): void => {\n    this.open = false;\n    this.setFocus();\n  };\n\n  private menuButtonClick = (): void => {\n    this.toggleOpen();\n  };\n\n  updateTooltip = (event: Event): void => {\n    const tooltips = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el) => el?.matches(\"calcite-tooltip\")) as HTMLCalciteTooltipElement[];\n\n    this.tooltipEl = tooltips[0];\n    this.setTooltipReferenceElement();\n  };\n\n  setTooltipReferenceElement = (): void => {\n    const { tooltipEl, expanded, menuButtonEl, open } = this;\n\n    if (tooltipEl) {\n      tooltipEl.referenceElement = !expanded && !open ? menuButtonEl : null;\n    }\n  };\n\n  updateAction = (action: HTMLCalciteActionElement, index: number): void => {\n    const { guid, activeMenuItemIndex } = this;\n    const id = `${guid}-action-${index}`;\n\n    action.tabIndex = -1;\n    action.setAttribute(\"role\", \"menuitem\");\n\n    if (!action.id) {\n      action.id = id;\n    }\n\n    // data attribute is used to style the \"activeMenuItemIndex\" action using token focus styling.\n    action.toggleAttribute(activeAttr, index === activeMenuItemIndex);\n  };\n\n  updateActions = (actions: HTMLCalciteActionElement[]): void => {\n    actions?.forEach(this.updateAction);\n  };\n\n  handleDefaultSlotChange = (event: Event): void => {\n    const actions = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .reduce(\n        (previousValue: HTMLCalciteActionElement[], currentValue): HTMLCalciteActionElement[] => {\n          if (currentValue?.matches(\"calcite-action\")) {\n            previousValue.push(currentValue as HTMLCalciteActionElement);\n            return previousValue;\n          }\n\n          if (currentValue?.matches(\"calcite-action-group\")) {\n            return previousValue.concat(\n              Array.from(currentValue.querySelectorAll(\"calcite-action\")),\n            );\n          }\n\n          return previousValue;\n        },\n        [],\n      );\n\n    this.actionElements = actions.filter((action) => !action.disabled && !action.hidden);\n  };\n\n  isValidKey(key: string, supportedKeys: string[]): boolean {\n    return !!supportedKeys.find((k) => k === key);\n  }\n\n  menuButtonKeyDown = (event: KeyboardEvent): void => {\n    const { key } = event;\n    const { actionElements, activeMenuItemIndex, open } = this;\n\n    if (!actionElements.length) {\n      return;\n    }\n\n    if (isActivationKey(key)) {\n      event.preventDefault();\n\n      if (!open) {\n        this.toggleOpen();\n        return;\n      }\n\n      const action = actionElements[activeMenuItemIndex];\n      action ? action.click() : this.toggleOpen(false);\n    }\n\n    if (key === \"Tab\") {\n      this.open = false;\n      return;\n    }\n\n    if (key === \"Escape\") {\n      this.toggleOpen(false);\n      event.preventDefault();\n      return;\n    }\n\n    this.handleActionNavigation(event, key, actionElements);\n  };\n\n  handleActionNavigation = (\n    event: KeyboardEvent,\n    key: string,\n    actions: HTMLCalciteActionElement[],\n  ): void => {\n    if (!this.isValidKey(key, SUPPORTED_MENU_NAV_KEYS)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (!this.open) {\n      this.toggleOpen();\n\n      if (key === \"Home\" || key === \"ArrowDown\") {\n        this.activeMenuItemIndex = 0;\n      }\n\n      if (key === \"End\" || key === \"ArrowUp\") {\n        this.activeMenuItemIndex = actions.length - 1;\n      }\n\n      return;\n    }\n\n    if (key === \"Home\") {\n      this.activeMenuItemIndex = 0;\n    }\n\n    if (key === \"End\") {\n      this.activeMenuItemIndex = actions.length - 1;\n    }\n\n    const currentIndex = this.activeMenuItemIndex;\n\n    if (key === \"ArrowUp\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(Math.max(currentIndex - 1, -1), actions.length);\n    }\n\n    if (key === \"ArrowDown\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(currentIndex + 1, actions.length);\n    }\n  };\n\n  toggleOpenEnd = (): void => {\n    this.setFocus();\n    this.el.removeEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n  };\n\n  toggleOpen = (value = !this.open): void => {\n    this.el.addEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n    this.open = value;\n  };\n\n  private handlePopoverOpen = (): void => {\n    this.open = true;\n  };\n\n  private handlePopoverClose = (): void => {\n    this.open = false;\n  };\n}\n",":host {\n  @apply text-color-2\n  text-1\n  box-border\n  flex\n  flex-col;\n}\n\n::slotted(calcite-action-group) {\n  border-block-end: 1px solid var(--calcite-color-border-3);\n}\n\n::slotted(calcite-action-group:last-child) {\n  border-block-end: 0;\n}\n\n.default-trigger {\n  @apply relative\n  h-full\n  flex-initial\n  self-stretch;\n}\n\n@include slotted(\"trigger\", \"calcite-action\") {\n  @apply relative\n  h-full\n  flex-initial\n  self-stretch;\n}\n\n.menu {\n  @apply flex-col\n  flex-nowrap\n  outline-none\n  overflow-y-auto\n  overflow-x-hidden\n  max-h-menu;\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver } from \"./observers\";\n\nconst observed = new Set<HTMLElement>();\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: MutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  observed.delete(component.el);\n\n  // we explicitly process queued mutations and disconnect and reconnect\n  // the observer until MutationObserver gets an `unobserve` method\n  // see https://github.com/whatwg/dom/issues/126\n  processMutations(mutationObserver.takeRecords());\n  mutationObserver.disconnect();\n  for (const [element] of observed.entries()) {\n    mutationObserver.observe(element, observerOptions);\n  }\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n"],"names":["SLOTS","menuActions","menuTooltip","ICONS","CSS","ActionGroup","proxyCustomElement","HTMLElement","setMenuOpen","event","this","menuOpen","target","open","handleMenuActionsSlotChange","hasMenuActions","slotChangeHasAssignedElement","expandedHandler","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","setFocus","componentFocusable","el","focus","connectedCallback","connectLocalized","connectMessages","connectConditionalSlotComponent","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","renderMenu","expanded","scale","layout","messages","overlayPositioning","h","flipPlacements","hidden","label","more","onCalciteActionMenuOpen","placement","icon","slot","SLOTS$1","trigger","text","textEnabled","name","onSlotchange","tooltip","render","class","role","getRoundRobinIndex","index","total","SUPPORTED_MENU_NAV_KEYS","ActionMenu","actionElements","guid","concat","menuId","menuButtonId","connectMenuButtonEl","menuButtonEl","slottedMenuButtonEl","defaultMenuButtonEl","disconnectMenuButtonEl","setTooltipReferenceElement","active","setAttribute","toAriaBoolean","id","addEventListener","menuButtonClick","menuButtonKeyDown","removeEventListener","setMenuButtonEl","actions","assignedElements","flatten","filter","matches","setDefaultMenuButtonEl","handleCalciteActionClick","toggleOpen","updateTooltip","tooltips","tooltipEl","referenceElement","updateAction","action","activeMenuItemIndex","tabIndex","toggleAttribute","updateActions","forEach","handleDefaultSlotChange","reduce","previousValue","currentValue","push","Array","from","querySelectorAll","disabled","key","length","isActivationKey","preventDefault","click","handleActionNavigation","isValidKey","currentIndex","Math","max","toggleOpenEnd","value","arguments","undefined","_this","handlePopoverOpen","handlePopoverClose","openHandler","calciteActionMenuOpen","emit","activeMenuItemIndexHandler","focusElement","renderMenuButton","appearance","ref","renderMenuItems","activeAction","activeDescendantId","autoClose","focusTrapDisabled","offsetDistance","onCalcitePopoverClose","onCalcitePopoverOpen","pointerDisabled","onClick","Fragment","supportedKeys","find","k","observed","Set","mutationObserver","observerOptions","childList","component","createObserver","processMutations","observe","delete","takeRecords","disconnect","element","entries","mutations","_ref","forceUpdate"],"sourceRoot":""}